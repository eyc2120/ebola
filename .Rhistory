new.data[,!is.sagrei]
new.data[is.sagrei]
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[!is.sagrei, "Sim Diameter"])
summary(new.data[(!is.sagrei), "Sim Diameter"])
new.data
summary(new.data[!is.sagrei, "Sim Diameter"])
new.data[is.sagrei, "Sim Diameter"]
new.data = data.frame(Species = lizards[,"Species"], Sim.Diameter = diam)
summary(new.data)
is.sagrei = {new.data[,"Species"] == "Sagrei"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[!is.sagrei, "Sim Diameter"])
new.data[is.sagrei, "Sim Diameter"]
is.sagrei = {new.data[,"Species"] == "Sagrei"}
is.sagrei
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[!is.sagrei, "Sim Diameter"])
!is.sagrei = {new.data[,"Species"] != "Sagrei"}
not.sagrei = {new.data[,"Species"] != "Sagrei"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[not.sagrei, "Sim Diameter"])
is.sagrei = {new.data[,"Species"] == "Sagrei"}
not.sagrei = {new.data[,"Species"] != "Sagrei"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[not.sagrei, "Sim Diameter"])
var(new.data[is.sagrei, "Sim.Diameter"])
not.sagrei = !{new.data[,"Species"] == "Sagrei"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[not.sagrei, "Sim Diameter"])
not.sagrei = {new.data[,"Species"] == "Distichus"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[not.sagrei, "Sim Diameter"])
new.data = data.frame(Species = lizards[,"Species"], Sim.Diameter = diam)
summary(new.data)
is.sagrei = {new.data[,"Species"] == "Sagrei"}
not.sagrei = {new.data[,"Species"] == "Distichus"}
summary(new.data[is.sagrei, "Sim.Diameter"])
summary(new.data[not.sagrei, "Sim Diameter"])
ylab = "Diameter (inches)")
+ylab = "Diameter (inches)")
boxplot(Sim.Diameter ~ Species, data = new.data, ylab = "Diameter (inches)")
abline(h=4, lty = "dashed")
dev.off()
boxplot(Sim.Diameter ~ Species, data = new.data, ylab = "Diameter (inches)")
abline(h=4, lty = "dashed")
boxplot(Sim.Diameter ~ Species, data = new.data, ylab = "Diameter (inches)", main = "Lizards")
abline(h=4, lty = "dashed")
library(datasets)
data(iris)
summary(iris)
iris$Sepal.Length
setosa = iris[iris$Species == "setosa"]
setosa = iris[,iris$Species == "setosa"]
setosa = iris[iris$Species == "setosa"]
setosa = iris[iris$Species == "setosa",]
versicolor = iris[iris$Species == "versicolor"]
versicolor = iris[iris$Species == "versicolor",]
virginica = iris[iris$Species == "virginica",]
setosalength = iris[setosa,"Septal.Length"]
summary(setosalength)
setosalength = iris[setosa,"Sepal.Length"]
summary(setosalength)
setosalength = iris[setosa,"Sepal.Length"]
setosalength = iris[setosa,iris$"Sepal.Length"]
setosalength = setosa$Sepal.Length
summary(setosalength)
versicolorl = versicolor$Sepal.Length
summary(versicolorl = versicolor$Sepal.Length)
versicolorl = versicolor$Sepal.Length
summary(versicolorl)
virginical = virginical$Sepal.Length
virginical = virginica$Sepal.Length
par(mfrow = c(3,1))
hist(setosalength)
par(mfrow = c(3,3))
hist(setosalength)
dev.off()
hist(setosalength)
par(mfrow = c(3,1))
plot(setosalength)
plot(setosa[,"Sepal.Length"])
dev.off()
plot(setosa[,"Sepal.Length"])
plot(setosa[,"Sepal.Length"], lty = "hist")
plot(setosa[,"Sepal.Length"], lty = "histogram")
plot(setosa[,"Sepal.Length"], main = "hi")
plot(Distichus.lizards[,"Diameter"], main = "Perch Diameter (Distichus)")
plot(setosa[,"Sepal.Length"], main = "hi")
plot(setosa["Sepal.Length"], main = "hi")
plot(setosa["Sepal.Length",], main = "hi")
plot(setosa[,"Sepal.Length"], main = "hi")
hist(setosa[,"Sepal.length"])
hist(setosa["Sepal.length"])
hist(setosa["Sepal.Length"])
hist(setosa[,"Sepal.Length"])
plot(Distichus.lizards[,"Diameter"], main = "Perch Diameter (Distichus)")
plot(iris[,"Sepal.Length"])
hist(setosalength)
par(mfrow = c(3,1))
hist(setosalength)
par(mfrow = c(2,2))
hist(setosalength)
hist(setosalength, main = "Setosa")
dev.off()
par(mfrow = c(2,2))
hist(setosalength, main = "Setosa")
hist(versicolorl, main = "Versicolor")
hist(virginical, main = "Virginiaca")
hist(setosalength, main = "Setosa", xaxis = c(min(setosa), max(setosa)))
hist(setosalength, main = "Setosa", xaxis = c(4.5,6))
hist(setosalength, main = "Setosa")
dev.off()
par(mfrow = c(2,2))
hist(setosalength, main = "Setosa")
hist(versicolorl, main = "Versicolor")
hist(virginical, main = "Virginiaca")
summary(setosalength)
hist(setosalength, main = "Setosa", xlim = c(min(setosalength), max(setosalength)))
dev.off()
par(mfrow = c(2,2))
hist(setosalength, main = "Setosa", xlim = c(min(setosalength), max(setosalength)))
hist(versicolorl, main = "Versicolor")
hist(virginical, main = "Virginiaca")
dev.off()
par(mfrow = c(2,2))
hist(setosalength, main = "Setosa", xlim = c(4.3,5.8))
hist(versicolorl, main = "Versicolor")
hist(virginical, main = "Virginiaca")
summary(iris)
boxplot(Sepal.Length ~ Species, data = iris)
help(writefiel)
help(writefile)
output <- file("output.txt")
writeLines(iris,output
writeLines(iris,output)
writeLines(iris,output)
write(iris,output)
writeLine(iris,output)
writeLines(iris,output)
write.table(iris,output)
close(output)
output <- file("output.txt")
write.table(iris,output)
close(output)
iris2 = readtable("output.txt", header = TRUE)
iris2 = read.table("output.txt", header = TRUE)
iris2
gaussian.test
colnames(gaussian.test)
colname <- colnames(gaussian.test)
for(i in colname){
summary(colname)
}
colname <- colnames(gaussian.test)
for(i in colname){
print(summary(colname))
}
colnames(gaussian.test)
colnames(gaussian.test)
for(i in colnames(gaussian.text)){
summary(i)
}
colnames(gaussian.test)
for(i in colnames(gaussian.test)){
summary(i)
}
for(i in colnames(gaussian.test)){
print(summary(i))
}
for(i in colnames(gaussian.test)){
print(summary(gaussian.test$i))
}
gaussian.test$"A"
summary(gaussian.test$"A")
for(element in colnames(gaussian.test)){
summary(gaussian.test$element)}
print(summary(gaussian.test$element))}
for(element in colnames(gaussian.test)){
print(summary(gaussian.test$element))}
sample(50, gaussian.test, replace = TRUE)
help(sample)
source(bnlearn)
source("bnlearn")
bnlearn
'bnlearn'
methods("bnlearn")
UseMethod('bnlearn')
dir('bnlearn')
methods('bnlearn')
data(marks)
str(marks)
ug = empty.graph(names(marks))
names(iris)
UseMethod("empty.graph")
UseMethod("empty.graph()")
methods("empty.graph")
str(marks)
ug
acrs(ug,ignore.cycles = TRUE)
arcs(ug,ignore.cycles = TRUE)
arcs(ug, ignore.cycles = TRUE) = matrix(
+ c("MECH", "VECT", "MECH", "ALG", "VECT", "MECH",
+ "VECT", "ALG", "ALG", "MECH", "ALG", "VECT",
+ "ALG", "ANL", "ALG", "STAT", "ANL", "ALG",
+ "ANL", "STAT", "STAT", "ALG", "STAT", "ANL"),
+ ncol = 2, byrow = TRUE,
+ dimnames = list(c(), c("from", "to")))
arcs(ug, ignore.cycles = TRUE) = matrix(c("MECH", "VECT", "MECH", "ALG", "VECT", "MECH","VECT", "ALG", "ALG", "MECH", "ALG", "VECT","ALG", "ANL", "ALG", "STAT", "ANL", "ALG","ANL", "STAT", "STAT", "ALG", "STAT", "ANL"),ncol = 2, byrow = TRUE,dimnames = list(c(), c("from", "to")))
UG
ug
dag3 = empty.graph(nodes(dag))
dag3 = empty.graph(nodes(gu))
dag3 = empty.graph(nodes(ug))
dag3 = set.arc(dag3, "VECT", "MECH")
dag3 = set.arc(dag3, "ALG", "MECH")
dag3 = set.arc(dag3, "ALG", "VECT")
dag3 = set.arc(dag3, "ANL", "ALG")
dag3 = set.arc(dag3, "STAT", "ALG")
dag3 = set.arc(dag3, "STAT", "ANL")
all.equal(ug, dag3)
all.equal(moral(ug), dag3)
all.equal(ug, moral(dag3))
node.ordering(dag3)
nbr(dag3, "ANL")
nbr(dag3, "VECT")
nbr(dag3, "MECH")
nbr(dag3, "MECH")
"ANL" %in% mb(dag3, "ALG")
chld = children(dag3, "VECT")
chld
par = parents(dag3, "VECT")
par
o.par(sappy, chld, parents, x = dag3)
o.par = sapply(chld, parents, x = dag3)
o.par
unique(c(chld, par, o.par[o.par != "VECT"]))
mb(dag3, "VECT")
mb(dag3, "ALG")
score(dag3, data = marks, type = "loglik-g")
x=1:5
print(x)
x=seq(0,10,length=101)
print(x)
x[1] = 17
print x[c(1,2)]
print(x[c(1,2)])
x==2
junk = c(1,2,3,4,5,.5,2,6,0,1,1,0)
m = matrix(junk,ncol=3,byrow=T)
m
m = matrix(junk,ncol=3,byrow=F)
m
m[,1]
junk = c(1,2,3,4,5,.5,2,6,0,1,1,0)
m = matrix(junk,ncol=3,byrow=T)
m[,1]
m
m[1,]
x1=1:3
x2=c(7,6,6)
x3=c(12,19,21)
A=cbind(x1,x2,x3)
A
A=rbind(x1,x2,x3)
A
dim(A)
nrow(A)
ncol(A)
apply(A,1,sum)
apply(A,2,sum)
B=matrix(rnorm(30),5,6)
B
rnorm(30)
rnorm(2)
A %*% B
B=matrix(rnorm(30),5,6)
A%*%B
A=outer(x,x,FUN="*")
A
diag(A)
A=matrix(rnorm(9),3,3)
print(A)
solve(A)
det(A)
diag(A)
sum(diag(A))
calif = read.table("~/teaching/350/hw/06/cadata.dat",header=TRUE)
calif = read.table("~/Desktop/cadata.txt",header=TRUE)
calif = read.table("~/Desktop/cadata.dat",header=TRUE)
calif = read.table("/Desktop/cadata.dat",header=TRUE)
calif = read.table("/Desktop/cadata.txt",header=TRUE)
pwd
wd
pwd?
?
?
e
setwd ~/Desktop/
setwd /Desktop/
d
set wd '~/Desktop'
setwd '~/Desktop'
setwd '/Desktop'
setwd '/Desktop/'
calif = read.table("~/Desktop/cadata.dat",header=TRUE)
dim(calif)
require(tree)
install.packages(tree)
install.packages('tree')
library('tree')
treefit = tree(log(MedianHouseValue)~Longitude+Latitude,data=calif)
plot(treefit)
text(treedit,cex=0.75)
text(treefit,cex=0.75)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(cali$MedianHouseValue,price.deciles,include.lowest=TRUE)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=grey(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=blue(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=red(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=heat(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=hot(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=jet(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
price.deciles = quantile(calif$MedianHouseValue,0:10/10)
cut.prices = cut(calif$MedianHouseValue,price.deciles,include.lowest=TRUE)
plot(calif$Longitude,calif$Latitude,col=grey(10:2/11)[cut.prices],pch=20,
xlab="Longitude",ylab="Latitude")
partition.tree(treefit,ordvars=c('Longitude','Latitude'),add=TRUE)
summary(treefit)
treefit3 <- tree(log(MedianHouseValue)~.,data=calif)
plot(treefit)
text(treefit,cex=0.6)
plot(treefit3)
text(treefit3,cex=0.75)
x <- seq(-4,4,1000)
y <= dnorm(x,0,0.1)
plot(x,y)
x <- seq(-4,4,1000)
y <- dnorm(x,0,0.1)
plot(x,y)
y
x <- seq(-4,4,1000)
y <- dnorm(x,0,0.1)
y
y <- dnorm(0,0.1)
y
x <- seq(-4,4,.001)
y <- dnorm(x,0,0.1)
plot(x,y)
x <- seq(-4,4,.001)
y <- dnorm(x,0.5,0.1)
plot(x,y)
x = 1:100
plot(x,2/x)
plot(x,sqrt(x))
x = 1:1000
plot(x,2/x)
plot(x,sqrt(x))
plot(x, x*log(x^2))
plot(x, (x^2)*log(x))
plot(x, x^2)
plot(x, (x^2)*log(x))
plot(x, x^2)
plot(x, log(x))
plot(x, log^2(x))
plot(x, log(x))
plot(x, (log(x))^2)
plot(x, log(x))
plot(x, (log(x))^2)
plot(x,2/x)
plot(x, log(log(x)))
plot(x, x*log(log(x)))
plot(x, log(x^2))
plot(x, (log(x))^2)
plot(x, log(x^2))
plot(x, (log(x))^2)
install.packages('sn')
library(sn)
sn:(0,20,30,4)
sn(0,20,30,4)
install.packages('fGarch')
library(fGarch)
x=seq(35,100,.1)
dsnorm(x,mean=0,sd=1,xi=1.5)
dsnorm(x,mean=100,sd=.1,xi=1.5)
plot(x,dsnorm(x,mean=100,sd=.1,xi=1.5))
plot(x,dsnorm(x,mean=100,sd=.01,xi=40))
plot(x,dsnorm(x,mean=100,sd=.01,xi=30))
plot(x,dsnorm(x,mean=100,sd=.01,xi=10))
plot(x,dsnorm(x,mean=100,sd=.01,xi=5))
plot(x,dsnorm(x,mean=99,sd=.01,xi=5))
abline(x,dsnorm(x,mean=99,sd=.01,xi=5))
x=seq(35,100,1)
plot(x,dsnorm(x,mean=99,sd=1,xi=40))
abline(x,dsnorm(x,mean=99,sd=1,xi=40))
abline(x,dsnorm(x,mean=99,sd=.5,xi=40))
abline(x,dsnorm(x,mean=99,sd=1,xi=30))
dev.off()
plot(x,dsnorm(x,mean=99,sd=1,xi=40))
plot(x,dsnorm(x,mean=99,sd=1,xi=30))
plot(x,dsnorm(x,mean=99,sd=.1,xi=30))
plot(x,dsnorm(x,mean=99,sd=1,xi=30))
plot(x,dsnorm(x,mean=100,sd=1,xi=30))
x=seq(35,101,1)
plot(x,dsnorm(x,mean=100,sd=1,xi=30))
install.packages('ISLR')
library(ISLR)
data(Advertising)
data("Advertising")
library(MASS)
data('Advertising')
data('Auto')
ls()
ls().rm
ls().rm()
rm(ls.l())
rm(ls())
rm.ls()
source(predict)
predict
setwd('/Users/kristyc/ebola')
lit <- read.csv('ebola_lit.csv',sep='\t')
head(lit)
lit <- read.csv('ebola_lit.csv')
lit
colnames(lit)
dim(lit)
lit[,0]
lit[,1]
lit[,2]
lit[,3]
lit[,4]
lit[,5]
lit <- lit[,4]
lit
press <- read.csv('ebola_press.csv')
press
dim(press)
press.val <- read.csv('ebola_press.csv')
lit.val <- lit[,4]
lit.val
lit <- read.csv('ebola_lit.csv')
colnames(lit)
dim(lit)
lit.val <- lit[,4]
lit.val
lit[,3]
lit.time <- lit[,2]
lit[,2]
lit.time <- lit[,2]
dim(press)
press[,2]
press.time <- press[,2]
press.val <- press[,4]
press.val
conf <- read.csv('ebola_conference.csv')
conf.time <- conf[,2]
conf.val <- conf[,4]
trial <- read.csv('ebola_trial.csv')
trial <- read.csv('ebola_trial.csv')
trial <- read.csv('ebola_trials.csv')
trial.time <- conf[,2]
trial.val <- conf[,4]
plot(press.time,press.val)
plot(press.val)
plot(press.val,lit.val)
trial.val <- conf[,4]
trial.val
trial
trial <- read.csv('ebola_trials.csv')
trial.time <- conf[,2]
trial.val <- conf[,5]
trial
cbind(lit.time,press.time,conf.time,trial.time)
rbind(lit.time,press.time,conf.time,trial.time)
lit.time
yo <- rbind(lit.time,press.time,conf.time,trial.time)
yo
lit.time
trial.time
yo <- cbind(lit.time,press.time,conf.time,trial.time)
yo
lit.time
[lit.time,trial.time]
[lit.time,trial.time]
c(lit.time,trial.time)
